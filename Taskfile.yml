version: '3'

tasks:
  default:
    desc: "Default task - setup and run security demo"
    cmds:
      - task --list

  setup:
    desc: "Set up the Python environment using uv + Poetry hybrid approach"
    cmds:
      - echo "Creating virtual environment with uv..."
      - uv venv .venv --python 3.12.11
      - echo "Configuring Poetry to use .venv..."
      - poetry env use .venv/bin/python
      - poetry config virtualenvs.in-project true
      - echo "Installing dependencies with Poetry..."
      - poetry install
      - echo "✅ Setup complete! Virtual environment ready at .venv/"

  generate-keys:
    desc: "[DEPRECATED] Generate RSA key pair for OAuth JWT signing (not needed with OAuth Proxy)"
    cmds:
      - echo "⚠️  DEPRECATED - RSA keys not needed with Azure OAuth Proxy. Configure AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET in .env instead"

  run-server:
    desc: "Run the secure MCP server"
    cmds:
      - poetry run python src/main.py
    env:
      LLM_PROVIDER: "{{.LLM_PROVIDER | default \"ollama\"}}"

  run-oauth:
    desc: "[DEPRECATED] Run the OAuth authorization server (replaced by Azure OAuth Proxy)"
    cmds:
      - echo "⚠️  DEPRECATED - Local OAuth server replaced by Azure OAuth Proxy. Use 'task run-server' instead"

  run-openai-client:
    desc: "Run the secure OpenAI client demo"
    cmds:
      - poetry run python src/secure_clients/openai_client.py

  run-anthropic-client:
    desc: "Run the secure Anthropic client demo"
    cmds:
      - poetry run python src/secure_clients/anthropic_client.py

  run-langchain-client:
    desc: "Run the secure LangChain ReAct agent demo"
    cmds:
      - poetry run python src/secure_clients/langchain_client.py

  run-dspy-client:
    desc: "Run the secure DSPy ReAct agent demo"
    cmds:
      - poetry run python src/secure_clients/dspy_client.py

  run-litellm-client:
    desc: "Run the secure LiteLLM MCP client demo"
    cmds:
      - poetry run python src/secure_clients/litellm_client.py

  test:
    desc: "Run all tests"
    cmds:
      - poetry run pytest tests/ -v
    env:
      LLM_PROVIDER: "{{.LLM_PROVIDER | default \"ollama\"}}"

  format:
    desc: "Format code"
    cmds:
      - poetry run black src/ tests/
      - poetry run ruff check --fix src/ tests/

  clean:
    desc: "Clean up generated files"
    cmds:
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - rm -rf .pytest_cache
      - rm -rf .ruff_cache
      - rm -rf security_logs/

  clean-env:
    desc: "Clean virtual environment (use before setup if environment is corrupted)"
    cmds:
      - rm -rf .venv
      - echo "✅ Virtual environment removed. Run 'task setup' to recreate."

  setup-fresh:
    desc: "Clean environment and set up from scratch"
    deps: [clean-env]
    cmds:
      - task: setup

  generate-certs:
    desc: "Generate self-signed certificates for development"
    cmds:
      - mkdir -p certificates
      - openssl req -x509 -newkey rsa:4096 -keyout certificates/server.key -out certificates/server.crt -days 365 -nodes -subj "/CN=localhost"
      - chmod 600 certificates/server.key
      - chmod 644 certificates/server.crt

  generate-trusted-certs:
    desc: "Generate locally-trusted certificates using mkcert"
    cmds:
      - ./scripts/generate-local-certs.sh

  trust-certs:
    desc: "Add current certificates to system trust store"
    cmds:
      - ./scripts/trust-self-signed.sh

  # Docker tasks
  docker-build:
    desc: "Build Docker images for all services"
    cmds:
      - docker-compose build

  docker-up:
    desc: "Start all services with Docker Compose (with TLS)"
    deps: [generate-certs]
    cmds:
      - docker-compose up -d

  docker-down:
    desc: "Stop all Docker services"
    cmds:
      - docker-compose down

  docker-logs:
    desc: "View logs from all Docker services"
    cmds:
      - docker-compose logs -f

  docker-restart:
    desc: "Restart all Docker services"
    cmds:
      - docker-compose restart

  docker-clean:
    desc: "Clean up Docker containers, images, and volumes"
    cmds:
      - docker-compose down -v
      - docker system prune -f

  docker-shell-oauth:
    desc: "Open shell in OAuth container"
    cmds:
      - docker-compose exec oauth /bin/bash

  docker-shell-mcp:
    desc: "Open shell in MCP container"
    cmds:
      - docker-compose exec mcp /bin/bash
